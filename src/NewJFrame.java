
import java.awt.Color;
import java.awt.Component;
import java.awt.TextField;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.SwingConstants;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author √Ålvaro
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        setupGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        slider = new javax.swing.JSlider();
        botonRangos = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        inputMesa = new javax.swing.JTextField();
        submitMesa = new javax.swing.JButton();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        label13 = new java.awt.Label();
        labelCA = new java.awt.Label();
        straightFlush = new java.awt.Label();
        royalFlush = new java.awt.Label();
        full = new java.awt.Label();
        poker = new java.awt.Label();
        straight = new java.awt.Label();
        flush = new java.awt.Label();
        twoPair = new java.awt.Label();
        trio = new java.awt.Label();
        none = new java.awt.Label();
        pair = new java.awt.Label();
        label25 = new java.awt.Label();
        label26 = new java.awt.Label();
        label27 = new java.awt.Label();
        cA = new java.awt.Label();
        label29 = new java.awt.Label();
        totalCombos = new java.awt.Label();
        botonCombos = new java.awt.Button();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(45, 45));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        getContentPane().add(slider, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 710, 415, -1));

        botonRangos.setText("Evaluar");
        botonRangos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonRangosMouseClicked(evt);
            }
        });
        botonRangos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRangosActionPerformed(evt);
            }
        });
        getContentPane().add(botonRangos, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 670, 103, 39));

        jButton2.setText("Clear");
        jButton2.setActionCommand("clearbutton");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 670, 80, 40));

        inputMesa.setActionCommand("inputMesa");
        getContentPane().add(inputMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 670, 250, 30));

        submitMesa.setText("Submit");
        submitMesa.setActionCommand("botonMesa");
        submitMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitMesaActionPerformed(evt);
            }
        });
        getContentPane().add(submitMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 670, -1, 30));

        label1.setBackground(new java.awt.Color(150, 242, 242));
        label1.setText("Straight flush");
        getContentPane().add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 60, 90, 30));

        label2.setBackground(new java.awt.Color(150, 242, 242));
        label2.setText("Royal flush");
        getContentPane().add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 30, 90, 30));

        label3.setBackground(new java.awt.Color(150, 242, 242));
        label3.setText("Full house");
        getContentPane().add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 120, 90, 30));

        label4.setBackground(new java.awt.Color(150, 242, 242));
        label4.setText("4 of a kind");
        getContentPane().add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 90, 90, 30));

        label5.setBackground(new java.awt.Color(150, 242, 242));
        label5.setText("Straight");
        getContentPane().add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 180, 90, 30));

        label6.setBackground(new java.awt.Color(150, 242, 242));
        label6.setText("Flush");
        getContentPane().add(label6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 150, 90, 30));

        label7.setBackground(new java.awt.Color(150, 242, 242));
        label7.setText("2 pair");
        getContentPane().add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 240, 90, 30));

        label8.setBackground(new java.awt.Color(150, 242, 242));
        label8.setText("3 of a kind");
        getContentPane().add(label8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 210, 90, 30));

        label9.setBackground(new java.awt.Color(150, 242, 242));
        label9.setText("No made hand");
        getContentPane().add(label9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 420, 90, 30));

        label10.setBackground(new java.awt.Color(150, 242, 242));
        label10.setText("(Over) pair");
        getContentPane().add(label10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 270, 90, 30));

        label11.setBackground(new java.awt.Color(150, 242, 242));
        label11.setText("Weak pair");
        getContentPane().add(label11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 360, 90, 30));

        label12.setBackground(new java.awt.Color(150, 242, 242));
        label12.setText("Top pair");
        getContentPane().add(label12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 300, 90, 30));

        label13.setBackground(new java.awt.Color(150, 242, 242));
        label13.setText("Middle pair");
        getContentPane().add(label13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 330, 90, 30));

        labelCA.setBackground(new java.awt.Color(150, 242, 242));
        labelCA.setText("High card");
        getContentPane().add(labelCA, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 390, 90, 30));

        straightFlush.setBackground(new java.awt.Color(242, 200, 242));
        straightFlush.setText("0");
        getContentPane().add(straightFlush, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 60, 40, 30));

        royalFlush.setBackground(new java.awt.Color(242, 200, 242));
        royalFlush.setText("0");
        getContentPane().add(royalFlush, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 30, 40, 30));

        full.setBackground(new java.awt.Color(242, 200, 242));
        full.setText("0");
        getContentPane().add(full, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 120, 40, 30));

        poker.setBackground(new java.awt.Color(242, 200, 242));
        poker.setText("0");
        getContentPane().add(poker, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 90, 40, 30));

        straight.setBackground(new java.awt.Color(242, 200, 242));
        straight.setText("0");
        getContentPane().add(straight, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 180, 40, 30));

        flush.setBackground(new java.awt.Color(242, 200, 242));
        flush.setText("0");
        getContentPane().add(flush, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 150, 40, 30));

        twoPair.setBackground(new java.awt.Color(242, 200, 242));
        twoPair.setText("0");
        getContentPane().add(twoPair, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 240, 40, 30));

        trio.setBackground(new java.awt.Color(242, 200, 242));
        trio.setText("0");
        getContentPane().add(trio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 210, 40, 30));

        none.setBackground(new java.awt.Color(242, 200, 242));
        none.setText("0");
        getContentPane().add(none, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 420, 40, 30));

        pair.setBackground(new java.awt.Color(242, 200, 242));
        pair.setText("0");
        getContentPane().add(pair, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 270, 40, 30));

        label25.setBackground(new java.awt.Color(242, 200, 242));
        label25.setText("0");
        getContentPane().add(label25, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 360, 40, 30));

        label26.setBackground(new java.awt.Color(242, 200, 242));
        label26.setText("0");
        getContentPane().add(label26, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 300, 40, 30));

        label27.setBackground(new java.awt.Color(242, 200, 242));
        label27.setText("0");
        getContentPane().add(label27, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 330, 40, 30));

        cA.setBackground(new java.awt.Color(242, 200, 242));
        cA.setText("0");
        getContentPane().add(cA, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 390, 40, 30));

        label29.setBackground(new java.awt.Color(150, 252, 252));
        label29.setText("Total Combos");
        getContentPane().add(label29, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 470, 90, 30));

        totalCombos.setBackground(new java.awt.Color(242, 120, 242));
        totalCombos.setText("0");
        getContentPane().add(totalCombos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 470, 40, 30));

        botonCombos.setBackground(new java.awt.Color(220, 50, 50));
        botonCombos.setLabel("Calcular Combos");
        botonCombos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCombosActionPerformed(evt);
            }
        });
        getContentPane().add(botonCombos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 520, 140, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        textoPorcentaje.setText(String.valueOf(slider.getValue() + "%"));
        clear();
        calcularRanking(slider.getValue());
    }//GEN-LAST:event_sliderStateChanged

    private void botonRangosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonRangosMouseClicked
        parse(inputRangos.getText());
    }//GEN-LAST:event_botonRangosMouseClicked

    private void botonRangosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRangosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonRangosActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        clear();
    }//GEN-LAST:event_clearActionPerformed

    private void submitMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitMesaActionPerformed
        procesarInputMano();
    }//GEN-LAST:event_submitMesaActionPerformed

    private void botonCombosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCombosActionPerformed
        
        calcularCombos();
        
        mostrarCombos();
        calcularNumCombos();
    }//GEN-LAST:event_botonCombosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button botonCombos;
    private javax.swing.JButton botonRangos;
    private java.awt.Label cA;
    private java.awt.Label flush;
    private java.awt.Label full;
    private javax.swing.JTextField inputMesa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JSlider jSlider1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label2;
    private java.awt.Label label25;
    private java.awt.Label label26;
    private java.awt.Label label27;
    private java.awt.Label label29;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Label labelCA;
    private java.awt.Label none;
    private java.awt.Label pair;
    private java.awt.Label poker;
    private java.awt.Label royalFlush;
    private javax.swing.JSlider slider;
    private java.awt.Label straight;
    private java.awt.Label straightFlush;
    private javax.swing.JButton submitMesa;
    private java.awt.Label totalCombos;
    private java.awt.Label trio;
    private java.awt.Label twoPair;
    // End of variables declaration//GEN-END:variables


 private static final int LADO = 13;
    private static final int SEPARACION = 50;
    private static final int OFFSET = 10;
    private static final int TAMA√ëO = 45;
    public static JLabel[][] cuadricula = new JLabel[LADO][LADO];
    
    public static JLabel[][] mesa = new JLabel[13][4];
    //public static JFrame this = new JFrame("Prueba JFrame");
    public static TextField inputRangos = new TextField(100);
    //public static JButton botonRangos = new JButton("Evaluar");
    //public static JSlider porcentaje = new JSlider();
    public static JLabel textoPorcentaje = new JLabel();
    
    private static final String[] cartas =  {"A", "K", "Q", "J", "T", "9", "8", "7", "6", "5", "4", "3", "2"};
    private static final String[] palos = {"h", "c", "d", "s"};
    
    private String[] seleccionMesa = new String[52];
    int indiceMesa = 0;
    
    private String[] seleccionCombos = new String[169];
    int indiceSeleccion = 0;
    private static String [] ranking = {"AA","KK","AKs","QQ","AKo","JJ","AQs","TT","AQo","99","AJs","88","ATs","AJo","77","66","ATo","A9s","55","A8s","KQs","44","A9o","A7s","KJs","A5s","A8o","A6s","A4s","33","KTs","A7o","A3s","KQo","A2s","A5o","A6o","A4o","KJo","QJs","A3o","22","K9s","A2o","KTo","QTs","K8s","K7s","JTs","K9o","K6s","QJo","Q9s","K5s","K8o","K4s","QTo","K7o","K3s","K2s","Q8s","K6o","J9s","K5o","Q9o","JTo","K4o","Q7s","T9s","Q6s","K3o","J8s","Q5s","K2o","Q8o","Q4s","J9o","Q3s","T8s","J7s","Q7o","Q2s","Q6o","98s","Q5o","J8o","T9o","J6s","T7s","J5s","Q4o","J4s","J7o","Q3o","97s","T8o","J3s","T6s","Q2o","J2s","87s","J6o","98o","T7o","96s","J5o","T5s","T4s","86s","J4o","T6o","97o","T3s","76s","95s","J3o","T2s","87o","85s","96o","T5o","J2o","75s","94s","T4o","65s","86o","93s","84s","95o","T3o","76o","92s","74s","54s","T2o","85o","64s","83s","94o","75o","82s","73s","93o","65o","53s","63s","84o","92o","43s","74o","72s","54o","64o","52s","62s","83o","42s","82o","73o","53o","63o","32s","43o","72o","52o","62o","42o","32o"};
    
    private int[] totalJugadas = {0,0,0,0,0,0,0,0,0,0};
    private int[] jugadasMesa = {0,0,0,0,0,0,0,0,0,0};
    
    private int numCombos = 0;
    /*
    
        if(fila = columna) NADA/PAREJAS -VERDE
        if(fila > columna) Ofsuites - Gris
        if(colummna > fila) Suited - Rojo
        SELECCION - AMRILLO
    */
    
    /*
        1. Separar por comas
        2. Buscar operador
            Si lo hay: se trata
            Sino: se pinta
    
        Si hay +:
            Pareja: Desde la pareja hasta el 00
    
            No pareja:
                Carta alta no se mueve (1era)
                Carta baja: desde carta baja - cartaAlta+1
            suited: va a la derecha
            offsuited: va para abajo
   
        Si hay -:
            desde el 1er rango 
            desde rango baja - cartaAlta+1 -- hasta final o encontrear el rango superior | excluyendo parejas !!!!!!!!!!!!!!!!!!!
    */
    
    public void actualizarJugadas(Mano mano, int[] jugadas)
    {
        for(int i = jugadas.length-1; i >= 0; i--)
        {
            if(jugadas[i] != 0 && mano.noSeaMesa(i))
            {
                this.totalJugadas[i] += jugadas[i];
                //if(i != 0){
                //this.totalJugadas[i] -= jugadasMesa[i];}
                break;
            }
        }  
            
        /*for(int i = 0; i < jugadas.length; i++)
        {
            this.totalJugadas[i] += jugadas[i];
            if(i != 0){
            this.totalJugadas[i] -= jugadasMesa[i];}
        }*/
    }
    
    
    public void calcularRanking(int porcentaje)
    {
        int cartas = 169*porcentaje/100;
        
        for(int i = 0; i < cartas; i++)
        {
            //AA
            int columna;
            int fila;
            
            if(ranking[i].contains("s"))
            {
                columna = traductor(ranking[i].charAt(0)); 
                fila = traductor(ranking[i].charAt(1)); 
            }
            else if (ranking[i].contains("o"))
            {
                fila = traductor(ranking[i].charAt(0)); 
                columna = traductor(ranking[i].charAt(1));     
            }
            else //PAREJA
            {
               fila = traductor(ranking[i].charAt(0)); 
               columna = fila;
            }
            
            cuadricula[fila][columna].setBackground(Color.PINK);
        
        }
    }
    
    public void parse(String rango)
    {
        if (!rango.isEmpty()) 
        {
            String[] partes = rango.split(",");

            for (int i = 0; i < partes.length; i++) //Por cada rango
            {
                if (partes[i].contains("+")) {
                    rangoMas(partes[i]);
                } else if (partes[i].contains("-")) {
                    rangoMenos(partes[i]);
                } else {
                    
                    if(partes[i].charAt(0) == partes[i].charAt(1)) //Pareja
                    {
                        int valor = traductor(partes[i].charAt(0));
                        cuadricula[valor][valor].setBackground(Color.YELLOW);
                        seleccionCombos[indiceSeleccion] = cuadricula[valor][valor].getText();
                        indiceSeleccion++;
                    }
                    else
                    {
                         int valor0 = traductor(partes[i].charAt(0));
                         int valor1 = traductor(partes[i].charAt(1));
                        if (partes[i].contains("o"))
                        {
                            cuadricula[valor0][valor1].setBackground(Color.YELLOW);
                            seleccionCombos[indiceSeleccion] = cuadricula[valor0][valor1].getText();
                            indiceSeleccion++;
                        }
                        else
                        {
                            cuadricula[valor1][valor0].setBackground(Color.YELLOW);
                            seleccionCombos[indiceSeleccion] = cuadricula[valor1][valor0].getText();
                            indiceSeleccion++;
                        }
                    }
                   
                }
            }
        }  
    }

    public int traductorPalos(char palo)
    {
        switch(palo)
        {
            case 'h':
                return 0;
            case 'c':
                return 1;
            case 'd':
                return 2;
            case 's':
                return 3;
        }
        return 0;
    }
    
    public int traductor(char carta)
    {
        switch (carta) {
            case 'A':
                return 0;
            case 'K':
                return 1;
            case 'Q':
                return 2;
            case 'J':
                return 3;
            case 'T':
                return 4;
            case '9':
                return 5;
            case '8':
                return 6;
            case '7':
                return 7;
            case '6':
                return 8;
            case '5':
                return 9;
            case '4':
                return 10;
            case '3':
                return 11; 
            case '2':
                return 12;
        }
        return 0;
    }
    
    public void clear()
    {
        
        for(int fila = 0; fila < LADO;fila++)
        {
            for(int columna = 0; columna < LADO; columna++)
            {
                if(columna > fila )
                {
                    cuadricula[fila][columna].setBackground(Color.GRAY);
                }
                else if (columna == fila)
                {
                    cuadricula[fila][columna].setBackground(Color.GREEN);
                }
                else
                {  
                    cuadricula[fila][columna].setBackground(Color.RED);
                }
            }
        }
        seleccionCombos = new String[169];
        indiceSeleccion = 0;
        seleccionMesa = new String[52];
        indiceMesa = 0;
        inputRangos.setText("");
        inputMesa.setText("");
        
         for(int i = 0; i < 13; i++)
        {
            for(int j = 0; j < 4; j++)
            {
                mesa[i][j].setBackground(Color.white);
            }
        }
         
         royalFlush.setText("0");
        straightFlush.setText("0");
        poker.setText("0");
        full.setText("0");
        flush.setText("0");
        straight.setText("0");
        trio.setText("0");
        twoPair.setText("0");
        pair.setText("0");
        cA.setText("0");
        
        int[] arrayVacio = {0,0,0,0,0,0,0,0,0,0};
        totalJugadas = Arrays.copyOf(arrayVacio, arrayVacio.length);
        jugadasMesa = Arrays.copyOf(arrayVacio, arrayVacio.length);
        totalCombos.setText("0");
        numCombos = 0;

    }
    
    public void calcularNumCombos()
    {
        for(int i = 0; i< this.totalJugadas.length; i++)
        {
            this.numCombos += this.totalJugadas[i];
        }
        totalCombos.setText(Integer.toString(this.numCombos));
    }
    
    public void calcularCombos()
    {   
        Carta[] manoMesa = new Carta[indiceMesa];
        for(int i = 0; i < indiceMesa; i++)
        {
            manoMesa[i] = new Carta(seleccionMesa[i]);
        }
        
        Mano mesa = new Mano(manoMesa, indiceMesa); 
        mesa.evaluarMano();
        this.jugadasMesa = Arrays.copyOf(mesa.getArrayJugadas(), this.jugadasMesa.length);
        
        ////////////////////////////////////
        Arrays.sort(manoMesa);
        
        for(int i = 0; i < indiceMesa; i++)
        {
            manoMesa[i].setIsMesa(true);
            manoMesa[i].setPosMesa(i);   
        }
        
        Carta[] manoRangos = new Carta[2];
  
        for(int i = 0; i < indiceSeleccion; i++)
        {
           
            if(seleccionCombos[i].contains("s"))
            {
                for(int j = 0; j < 4; j++) //Palos1
                {
                    for(int k = j ; k < 4; k++) //Palo2
                    {
                        if(j == k) //Los palos son iguales
                        {
                            manoRangos[0] = new Carta(seleccionCombos[i].charAt(0) + palos[j]);
                            manoRangos[0].setIsMesa(false);
                            manoRangos[1] = new Carta(seleccionCombos[i].charAt(1) + palos[k]);
                            manoRangos[1].setIsMesa(false);
                            boolean ok0 = true;
                            boolean ok1 = true;
                            int indiceManoRangos = 2;
                            int l = 0;
                            
                            while(l < indiceMesa && (ok0 || ok1))
                            {
                                if(manoRangos[0].getValor() == manoMesa[l].getValor() && manoRangos[0].getPalo() == manoMesa[l].getPalo())
                                {
                                    ok0 = false;
                                    indiceManoRangos--;
                                }
                                
                                if(manoRangos[1].getValor() == manoMesa[l].getValor() && manoRangos[1].getPalo() == manoMesa[l].getPalo())
                                {
                                    ok1 = false;
                                    indiceManoRangos--;
                                }    
                                
                                l++;
                            }
                            
                            if(indiceManoRangos != 0)
                            {                           
                                Carta[] manoJunta = new Carta[indiceMesa + indiceManoRangos];
                            
                                if(ok0 && ok1)
                                {
                                    System.arraycopy(manoMesa, 0, manoJunta, 0, indiceMesa);  
                                    System.arraycopy(manoRangos, 0, manoJunta, indiceMesa, indiceManoRangos);  
                                //Calcular
                                Mano manoACalcular = new Mano(manoJunta, manoJunta.length);
                                manoACalcular.evaluarMano();
                                actualizarJugadas(manoACalcular, manoACalcular.getArrayJugadas());
                                
                                System.out.println(manoACalcular.toString());
                                //System.out.println(manoACalcular.mostrarJugada());
                                }         
                            }
                            
                            
                        }
                    }
                }
            }
            else //Offsuites y parejas
            {
                for(int j = 0; j < 4; j++) //Palos1
                {
                    for(int k = j ; k < 4; k++) //Palo2
                    {
                        if(j != k) //Los palos son distintos
                        {
                            manoRangos[0] = new Carta(seleccionCombos[i].charAt(0) + palos[j]);
                            manoRangos[0].setIsMesa(false);
                            manoRangos[1] = new Carta(seleccionCombos[i].charAt(1) + palos[k]);
                            manoRangos[1].setIsMesa(false);
                            boolean ok0 = true;
                            boolean ok1 = true;
                            int indiceManoRangos = 2;
                            int l = 0;
                            
                            while(l < indiceMesa && (ok0 || ok1))
                            {
                                if(manoRangos[0].getValor() == manoMesa[l].getValor() && manoRangos[0].getPalo() == manoMesa[l].getPalo())
                                {
                                    ok0 = false;
                                    indiceManoRangos--;
                                }
                                
                                if(manoRangos[1].getValor() == manoMesa[l].getValor() && manoRangos[01].getPalo() == manoMesa[l].getPalo())
                                {
                                    ok1 = false;
                                    indiceManoRangos--;
                                }    
                                
                                l++;
                            }
                            
                            if(indiceManoRangos != 0)
                            {                           
                                Carta[] manoJunta = new Carta[indiceMesa + indiceManoRangos];
                            
                                if(ok0 && ok1)
                                {
                                    System.arraycopy(manoMesa, 0, manoJunta, 0, indiceMesa);  
                                    System.arraycopy(manoRangos, 0, manoJunta, indiceMesa, indiceManoRangos);  
                                 //Calcular
                                Mano manoACalcular = new Mano(manoJunta, manoJunta.length);
                                manoACalcular.evaluarMano();
                                actualizarJugadas(manoACalcular, manoACalcular.getArrayJugadas());
                                
                                System.out.println(manoACalcular.toString());
                                //System.out.println(manoACalcular.mostrarJugada());

                                }
                            }
                            
                            
                        }
                    }
                }
            }
            
            
        }
        
    }
    
    public void setupGUI()
    {
        textoPorcentaje.setText(String.valueOf(slider.getValue() + "%"));
        
        this.setLayout(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(1350,1080);
        
        inputRangos.setBounds(OFFSET, SEPARACION*LADO + OFFSET *2, 400, 30);
        this.add(inputRangos);
        
       /* botonRangos.setBounds(450, SEPARACION*LADO + OFFSET *2, 200 , 30);
        this.add(botonRangos);*/
        
        /*porcentaje.setBounds(OFFSET, SEPARACION*LADO + OFFSET *6, 400, 30);
        this.add(porcentaje);*/
        
        textoPorcentaje.setBounds(450, SEPARACION*LADO + OFFSET *7, 100, 30);
        textoPorcentaje.setBackground(Color.WHITE);
        textoPorcentaje.setOpaque(true);
        this.add(textoPorcentaje);
        
        for(int fila = 0; fila < LADO;fila++)
        {
            for(int columna = 0; columna < LADO; columna++)
            {
                if(columna > fila )
                {
                    cuadricula[fila][columna] = new JLabel(cartas[fila]+cartas[columna] + "o", SwingConstants.CENTER);
                    cuadricula[fila][columna].setBackground(Color.GRAY);
                }
                else if (columna == fila)
                {
                    cuadricula[fila][columna] = new JLabel(cartas[fila]+cartas[columna], SwingConstants.CENTER);
                    cuadricula[fila][columna].setBackground(Color.GREEN);
                }
                else
                {
                    cuadricula[fila][columna] = new JLabel(cartas[columna] + cartas[fila] + "s", SwingConstants.CENTER);     
                    cuadricula[fila][columna].setBackground(Color.RED);
                }
                 
                 cuadricula[fila][columna].addMouseListener(new java.awt.event.MouseAdapter() 
                 {
                     public void mouseClicked(java.awt.event.MouseEvent evt) {
                        clickEtiqueta(evt);
                    }
                });
                  cuadricula[fila][columna].setOpaque(true);
                  cuadricula[fila][columna].setSize(TAMA√ëO,TAMA√ëO);
                  cuadricula[fila][columna].setBounds(SEPARACION * fila + OFFSET, SEPARACION * columna +OFFSET, cuadricula[fila][columna].size().width, cuadricula[fila][columna].size().height);
                  this.add(cuadricula[fila][columna]);
            }
        }
        
        
        for(int i = 0; i < 13; i++)
        {
            for(int j = 0; j < 4; j++)
            {
                mesa[i][j] = new JLabel(cartas[i] + palos[j], SwingConstants.CENTER);    
                mesa[i][j].setOpaque(true);
                mesa[i][j].setSize(TAMA√ëO,TAMA√ëO);
                mesa[i][j].setBounds(SEPARACION * j + OFFSET*75, SEPARACION * i +OFFSET, mesa[i][j].size().width, mesa[i][j].size().height);
                mesa[i][j].setBackground(Color.white);
                
                mesa[i][j].addMouseListener(new java.awt.event.MouseAdapter() 
                 {
                     public void mouseClicked(java.awt.event.MouseEvent evt) {
                        clickMesa(evt);
                    }  
                });
                
                this.add(mesa[i][j]);
            }
        }

        this.setVisible(true);
    }
    
     private void clickMesa(MouseEvent evt) 
     {
         JLabel etiqueta = (JLabel)evt.getComponent();
        
        etiqueta.setBackground(Color.cyan);
        seleccionMesa[indiceMesa] = etiqueta.getText();
        indiceMesa++;
     }
     
    private void clickEtiqueta(java.awt.event.MouseEvent evt) 
    {                                    
        JLabel etiqueta = (JLabel)evt.getComponent();
        
        etiqueta.setBackground(Color.cyan);
        seleccionCombos[indiceSeleccion] = etiqueta.getText();
        indiceSeleccion++;
        //etiqueta.setText("a");
    }   

    private void rangoParejas(String rango) 
    {
        int valor = traductor(rango.charAt(0));
        
        
        cuadricula[valor][valor].setBackground(Color.YELLOW);
        seleccionCombos[indiceSeleccion] = cuadricula[valor][valor].getText();
        indiceSeleccion++;
        for(int i = valor-1; i >= 0; i--)
        {
            cuadricula[i][i].setBackground(Color.YELLOW);
            seleccionCombos[indiceSeleccion] = cuadricula[i][i].getText();
            indiceSeleccion++;
        }
    }

    /*
    Si hay +:
            Pareja: Desde la pareja hasta el 00
    
            No pareja:
                Carta alta no se mueve (1era)
                Carta baja: desde carta baja - cartaAlta+1
            suited: va a la derecha
            offsuited: va para abajo
    */
    private void rangoMas(String rango) 
    {
        if (rango.charAt(0) == rango.charAt(1)) //Pareja
        {
            rangoParejas(rango.substring(0, 1));
        } 
        else 
        {
            if(rango.contains("o"))
            {
                int columna = traductor(rango.charAt(0)); 
                int fila = traductor(rango.charAt(1)); 

                int i = fila;
                while(i >= 0 && columna !=i)
                {
                    cuadricula[columna][i].setBackground(Color.YELLOW);
                    seleccionCombos[indiceSeleccion] = cuadricula[columna][i].getText();
                    indiceSeleccion++;
                    i--;
                }
            }
            else //s
            {
                int fila = traductor(rango.charAt(0)); 
                int columna = traductor(rango.charAt(1)); 

                int i = columna;
                while(i >= 0 && fila !=i)
                {
                    cuadricula[i][fila].setBackground(Color.YELLOW);
                    seleccionCombos[indiceSeleccion] = cuadricula[i][fila].getText();
                    indiceSeleccion++;
                    i--;
                }
            }
                
        }
    }
    
    private void rangoMenos(String rango) {
        if (rango.charAt(0) == rango.charAt(1)) //Pareja
        {
            rangoParejas(rango.substring(0, 1));
        } 
        else {
            if(rango.contains("o"))
            {
                int columna = traductor(rango.charAt(4)); 
                int fila = traductor(rango.charAt(5)); 
                int limSup = traductor(rango.charAt(1)); 
                
                int i = fila;
                while(i >= 0 && limSup !=i+1)
                {
                    cuadricula[columna][i].setBackground(Color.YELLOW);
                    seleccionCombos[indiceSeleccion] = cuadricula[columna][i].getText();
                    indiceSeleccion++;
                    i--;
                }
            }
            else //s
            {
                int fila = traductor(rango.charAt(4)); 
                int columna = traductor(rango.charAt(5)); 
                int limSup = traductor(rango.charAt(1));

                int i = columna;
                while(i >= 0 && limSup !=i+1)
                {
                    cuadricula[i][fila].setBackground(Color.YELLOW);
                    seleccionCombos[indiceSeleccion] = cuadricula[i][fila].getText();
                    indiceSeleccion++;
                    i--;
                }
            }
        }
    }

    private void procesarInputMano()  
    {
        String stringMano = inputMesa.getText();
        String cartas[] = stringMano.split(",");
        
        for(int i = 0; i < cartas.length; i++)
        {
            seleccionMesa[indiceMesa] = cartas[i];
            indiceMesa++;
            
            mesa[traductor(cartas[i].charAt(0))][traductorPalos(cartas[i].charAt(1))].setBackground(Color.cyan);
        }
    }

    private void mostrarCombos() 
    {
        royalFlush.setText(Integer.toString(this.totalJugadas[9]));
        straightFlush.setText(Integer.toString(this.totalJugadas[8]));
        poker.setText(Integer.toString(this.totalJugadas[7]));
        full.setText(Integer.toString(this.totalJugadas[6]));
        flush.setText(Integer.toString(this.totalJugadas[5]));
        straight.setText(Integer.toString(this.totalJugadas[4]));
        trio.setText(Integer.toString(this.totalJugadas[3]));
        twoPair.setText(Integer.toString(this.totalJugadas[2]));
        pair.setText(Integer.toString(this.totalJugadas[1]));
        cA.setText(Integer.toString(this.totalJugadas[0]));
        
    }

}
